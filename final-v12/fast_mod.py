def f(x, y, m):
    if y == 0:return 1
    ret = f(x, y/2, m)
    ret= ret*ret%m
    if y&1: ret = ret*x%m
    return ret


M = [
    (10110104596127, 9670453198560),
    (104648257118348370704723099, 104648257118348370704723098),
    (125000000000000064750000000000009507500000000000294357, 125000000000000064000000000000009250000000000000275600),
    (962750463413450814961058545701035539397690943, 550143121950543322834890597543448879655823396)
]

M = [
    (2022021721441, 2017266922320),
    (104648257118348370704723119, 104648257118348370704723119-1),
    (125000000000000140750000000000052207500000000006359661, 125000000000000140000000000000051646000000000006255808),
    (10885732038215355481752285039386319187390558900925053798518152998488201, 5654925734137847003507680539940945032410679948532495479749689869344520)
]

M, phi_M = list(zip(*M))
n = len(M)
rev10_ML = []

L = 2500

for m, phi in zip(M, phi_M):
    rev10_ML.append(f(10, phi-L, m))
    print('1/10^L=%s' % rev10_ML[-1])
    print('1/10=%s' % f(10, phi-1, m))

# print(f(map(int, raw_input().split())))

M = map(str, M)
phi_M = map(str, phi_M)
rev10_ML = map(str, rev10_ML)
import json
print('#define num_M %s' % n)
print(("const char* M[num_M] = %s;" % ( json.dumps(M, indent=4).replace('[', '{').replace(']', '}'))))
print(("const char* phi_M[num_M] = %s;" % (json.dumps(phi_M, indent=4).replace('[', '{').replace(']', '}'))))
print(("const char* rev10_ML[num_M] = %s;" % (json.dumps(rev10_ML, indent=4).replace('[', '{').replace(']', '}'))))